defmodule SurfaceMultiRenderReproducerWeb.Components.Hero do
  @moduledoc """
  A sample component generated by `mix surface.init`.
  """
  use Surface.LiveComponent

  @doc "The name"
  prop name, :string, default: "Guest"

  @doc "The subtitle"
  prop subtitle, :string

  @doc "The color"
  prop color, :string, values!: ["danger", "info", "warning"]

  data time, :integer, default: 0

  def mount(socket) do
    {:ok, allow_upload(socket, :upload, accept: :any)}
  end

  def render(assigns) do
    ~F"""
    <div>
      <section class={"phx-hero", "alert-#{@color}": @color}>
        <h1>Hi, {@name}</h1>
        <p>{@subtitle}</p>
        <p>Time is {@time}</p>
        <p><button :on-click="click">Click me in render/1.</button></p>
        <.render_click target={@myself} />
      </section>
      <section class="phx-hero">
        <h1>Upload test</h1>
        <p>
          <form :on-submit="upload-submit" :on-change="upload-validate">
            {live_file_input(@uploads.upload)}
            {#for entry <- @uploads.upload.entries}
              <span>{entry.client_name}</span>
              <progress value={entry.progress} max="100">{entry.progress}%</progress>
            {/for}
            <button type="submit">Submit</button>
          </form>
        </p>
      </section>
    </div>
    """
  end

  defp render_click(assigns) do
    ~F"""
    <p><button :on-click={"click", target: @target}>Click me in render_click/1.</button></p>
    """
  end

  def handle_event("click", _, socket) do
    {:noreply, assign(socket, time: System.os_time())}
  end

  def handle_event("upload-validate", _, socket) do
    {:noreply, socket}
  end

  def handle_event("upload-submit", _, socket) do
    files =
      consume_uploaded_entries(socket, :upload, fn %{path: path}, _entry ->
        {:ok, File.read!(path)}
      end)

    IO.inspect(files, label: "Uploaded files")

    {:noreply, socket}
  end
end
